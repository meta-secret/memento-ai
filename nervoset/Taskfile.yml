version: '3'

set: [pipefail]

vars:
  REGISTRY: 'cypherkitty'
  REPOSITORY: 'nervoset'

  BASE_IMAGE: "nervoset/base:latest"

  APP_VERSION: '0.1'

  INFRA: 'dev'

includes:
  common: .task/common.yml

  probiot:
    taskfile: .task/docker.yml
    vars:
      APP_NAME: 'probiot_t1000'
      K8S_APP_NAME: 'probiot-t1000'
      VERSION: '{{.APP_VERSION}}'
      IMAGE_NAME:
        sh: task img_name REGISTRY={{.REGISTRY}} REPOSITORY={{.REPOSITORY}} APP_NAME={{.APP_NAME}} K8S_APP_NAME={{.K8S_APP_NAME}} APP_VERSION={{.APP_VERSION}} INFRA={{.INFRA}}

  jarvis:
    taskfile: .task/docker.yml
    vars:
      APP_NAME: 'r2d2'
      K8S_APP_NAME: "r2d2"
      VERSION: '{{.APP_VERSION}}'
      IMAGE_NAME:
        sh: task img_name REGISTRY={{.REGISTRY}} REPOSITORY={{.REPOSITORY}} K8S_APP_NAME={{.K8S_APP_NAME}} APP_VERSION={{.APP_VERSION}} INFRA={{.INFRA}}

  groot:
    taskfile: .task/docker.yml
    vars:
      APP_NAME: 'groot'
      K8S_APP_NAME: 'groot'
      VERSION: '{{.APP_VERSION}}'
      IMAGE_NAME:
        sh: task img_name REGISTRY={{.REGISTRY}} REPOSITORY={{.REPOSITORY}} K8S_APP_NAME={{.K8S_APP_NAME}} APP_VERSION={{.APP_VERSION}} INFRA={{.INFRA}}

  walle:
    taskfile: .task/docker.yml
    vars:
      APP_NAME: 'walle'
      K8S_APP_NAME: "walle"
      VERSION: '{{.APP_VERSION}}'
      IMAGE_NAME:
        sh: task img_name REGISTRY={{.REGISTRY}} REPOSITORY={{.REPOSITORY}} K8S_APP_NAME={{.K8S_APP_NAME}} APP_VERSION={{.APP_VERSION}} INFRA={{.INFRA}}

  nervo_server:
    taskfile: .task/docker.yml
    vars:
      APP_NAME: 'nervo_server'
      K8S_APP_NAME: "nervo-server"
      VERSION: '{{.APP_VERSION}}'
      HOST_PORT: '3000'
      DOCKER_PORT: '3000'
      IMAGE_NAME:
        sh: task img_name REGISTRY={{.REGISTRY}} REPOSITORY={{.REPOSITORY}} K8S_APP_NAME={{.K8S_APP_NAME}} APP_VERSION={{.APP_VERSION}} INFRA={{.INFRA}}

  k8s:
    taskfile: k8s/Taskfile.yml
    dir: k8s
    vars:
      REGISTRY: '{{.REGISTRY}}'
      REPOSITORY: '{{.REPOSITORY}}'
      VERSION: '{{.APP_VERSION}}'

tasks:
  default:
    cmds:
      - task --list-all

  img_name:
    requires:
      vars:
        - REGISTRY
        - REPOSITORY
        - K8S_APP_NAME
        - APP_VERSION
    vars:
      PROD_IMAGE_NAME: '{{.REGISTRY}}/{{.REPOSITORY}}:{{.K8S_APP_NAME}}_v{{.APP_VERSION}}'
      DEV_IMAGE_NAME: '{{.REGISTRY}}/{{.REPOSITORY}}:{{.K8S_APP_NAME}}_$(whoami)_dev_v{{.APP_VERSION}}'
      IMAGE_NAME: '{{if eq .INFRA "prod"}}{{.PROD_IMAGE_NAME}}{{else}}{{.DEV_IMAGE_NAME}}{{end}}'
    cmds:
      - echo {{.IMAGE_NAME}}

  nervo_web_build:
    vars:
      NERVO_WASM_DIR: 'app/nervo_wasm'
      NERVO_WEB_DIR: 'nervo-web'
    cmds:
      - cd {{.NERVO_WASM_DIR}} && wasm-pack build

      - rm -rf {{.NERVO_WEB_DIR}}/pkg
      - rm -rf {{.NERVO_WEB_DIR}}/dist

      - mkdir -p {{.NERVO_WEB_DIR}}/pkg
      - cp -r {{.NERVO_WASM_DIR}}/pkg {{.NERVO_WEB_DIR}}
      - cd {{.NERVO_WEB_DIR}} && npm run build

  nervo_web_run:
    cmds:
      - task: nervo_web_build
      - cd nervo-web && npm run dev

  test:
    cmds:
      - task: common:base_build
      - docker run --rm {{.BASE_IMAGE}} cargo test --release
