version: '3'

set: [pipefail]

requires:
  vars:
    - CONFIGS
    - K8S_APP_NAME
    - IMAGE_NAME

vars:
  BUILD_DIR: build

tasks:
  default:
    cmds:
      - task --list-all

  print_vars:
    cmds:
      - echo configs {{.CONFIGS}}
      - echo app name {{.K8S_APP_NAME}}
      - echo img name {{.IMAGE_NAME}}

  deliver_config:
    cmds:
      - task -t {{.ROOT_DIR}}/Taskfile.yml infra:hazmat:void_sentinel:vault:config:get_config INFRA={{.INFRA}} > {{.BUILD_DIR}}/config.yaml

  generate_config_maps:
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - task: deliver_config
      - |
        kubectl create configmap \
          {{.K8S_APP_NAME}}-config \
          --from-file={{.BUILD_DIR}}/config.yaml \
          --dry-run=client -o yaml > \
          {{ .BUILD_DIR }}/configmap.yaml
      - rm -rf {{.BUILD_DIR}}/config.yaml

  generate_manifests:
    requires:
      vars:
        - IMAGE_NAME
    vars:
      PWD:
        sh: pwd
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - for: { var: CONFIGS }
        cmd: |
          docker run --rm \
            --platform=linux/amd64 \
            -v {{.PWD}}:/nervo-kcl \
            kcllang/kcl:v0.9.8 \
            sh -c "kcl /nervo-kcl/{{.ITEM}} -D imageName="{{.IMAGE_NAME}}" > /nervo-kcl/{{.BUILD_DIR}}/{{.ITEM}}.yaml"

  generate:
    cmds:
      - rm -rf {{ .BUILD_DIR }}
      - mkdir -p {{ .BUILD_DIR }}
      - task: generate_config_maps
      - task: generate_manifests

  redeploy_job:
    cmds:
      - task: delete
      - task: apply

      - |
        echo printing pods information
        kubectl get pods

      - |
        pod_name=$(kubectl get pods --selector=job-name={{.K8S_APP_NAME}} --output=jsonpath='{.items[0].metadata.name}')
        for i in {1..25}; do
          pod_status=$(kubectl get pod $pod_name --output=jsonpath='{.status.phase}')
    
          if [ "$pod_status" == "Running" ]; then
            kubectl logs --tail=1 $pod_name
            sleep 1
            continue
          fi
        
          completed=$(kubectl wait --for=condition=complete job/{{.K8S_APP_NAME}} --timeout=5s || true)
          if [[ $completed == "job.batch/{{.K8S_APP_NAME}} condition met" ]]; then
            echo "Job {{.K8S_APP_NAME}} has completed!"
            break
          else
            if [ "$i" -gt 3 ]; then
              echo ================================
              echo pods:
              kubectl get pods
            
              echo ================================
              echo describe job {{.K8S_APP_NAME}}:
              kubectl describe pod {{.K8S_APP_NAME}}
        
              echo ================================
              echo {{.K8S_APP_NAME}} logs:
              kubectl logs --tail=5 $pod_name
            fi
          fi
        done

  redeploy:
    cmds:
      - task: delete
      - task: apply_stateful_set

  apply:
    requires:
      vars:
        - APP_NAME
    cmds:
      - task -t {{.ROOT_DIR}}/Taskfile.yml nervoset:docker_{{.APP_NAME}}:push INFRA={{.INFRA}}
      - task: generate
      - kubectl apply -f {{ .BUILD_DIR }}

  apply_stateful_set:
    requires:
      vars:
        - APP_NAME
    cmds:
      - task: apply
      - kubectl wait --for=jsonpath='{.status.phase}'=Running pod/{{.K8S_APP_NAME}}-0 --timeout=180s

  delete:
    cmds:
      - task: generate
      - kubectl delete -f {{ .BUILD_DIR }} || true

  describe:
    cmds:
      - kubectl describe pod {{.K8S_APP_NAME}}-0
