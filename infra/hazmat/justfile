LOLAL_TMP_DIR := "tmp"

VAULT_INIT_FILE := LOLAL_TMP_DIR + "/vault-init.json"
VAULT_INIT_ENCRYPTED_FILE := "void_sentinel/vault_init.enc.txt"

VAULT_ROOT_TOKEN_FILE := LOLAL_TMP_DIR + "/vault-root-token.txt"
VAULT_UNSEAL_KEY_FILE := LOLAL_TMP_DIR + "/vault-unseal-key.txt"

SENTINEL_KEY_FILE := LOLAL_TMP_DIR + "/sentinel.txt"

SK_PLAINTEXT_FILE := LOLAL_TMP_DIR + "/nervoset-sk.txt"
SK_ENC_FILE := "void_sentinel/nervoset-sk.enc.txt"

PK_FILE := "void_sentinel/nervoset-pk.txt"

TF_VAR_FILE := LOLAL_TMP_DIR + "/security.tfvars"

sleep:
    @echo "sleep for 3 seconds"
    sleep 3

# Master password file must exists
genesis:
    @echo "Genesis verification"
    @if [ ! -f {{SK_ENC_FILE}} ]; then \
        echo "Master password file does not exists"; \
        exit 1; \
    fi
    #sentinel key file must exists
    @if [ ! -f {{SENTINEL_KEY_FILE}} ]; then \
        echo "Sentinel key file does not exists"; \
        exit 1; \
    fi
    @if [ ! -f {{VAULT_INIT_ENCRYPTED_FILE}} ]; then \
        echo "Vault init file does not exists"; \
        exit 1; \
    fi

vault_full_rebuild:
    docker kill hashi-vault || true
    rm -rf vault/nervoset-vault-storage || true
    just vault_start_and_init

# Very first start of the vault (run locally).
# There is no unseal and root token yet.
vault_genesis_start:
        mkdir -p vault/nervoset-vault-storage

        docker run --rm -d \
          --name=hashi-vault \
          -v $(pwd)/vault/config.hcl:/vault/config/config.hcl \
          -v $(pwd)/vault/nervoset-vault-storage:/vault/file \
          -e SKIP_CHOWN=true \
          -e SKIP_SETCAP=true \
          -e VAULT_ADDR="http://127.0.0.1:8200" \
          --user 1000:1000 \
          -p 8200:8200 \
          hashicorp/vault server

vault_start: void_sentinel_vault_init_decrypt
    mkdir -p vault/nervoset-vault-storage

    docker run --rm -d \
      --name=hashi-vault \
      -v $(pwd)/vault/config.hcl:/vault/config/config.hcl \
      -v $(pwd)/vault/nervoset-vault-storage:/vault/file \
      -e SKIP_CHOWN=true \
      -e SKIP_SETCAP=true \
      -e VAULT_ADDR="http://127.0.0.1:8200" \
      -e VAULT_TOKEN=$(jq -r '.root_token' {{VAULT_INIT_FILE}}) \
      --user 1000:1000 \
      -p 8200:8200 \
      hashicorp/vault server

vault_init:
    mkdir -p tmp
    docker exec hashi-vault \
      vault operator init -key-shares=1 -key-threshold=1 -format=json > {{VAULT_INIT_FILE}}

    # Extract root token and unseal key
    #jq -r '.root_token' {{VAULT_INIT_FILE}} > {{VAULT_ROOT_TOKEN_FILE}}
    #jq -r '.unseal_keys_b64[0]' {{VAULT_INIT_FILE}} > {{VAULT_UNSEAL_KEY_FILE}}

vault_start_and_init: vault_start sleep vault_init

vault_unseal:
    docker exec hashi-vault vault operator unseal $(jq -r '.unseal_keys_b64[0]' {{VAULT_INIT_FILE}})

vault_login:
    docker exec hashi-vault vault login -no-store $(jq -r '.root_token' {{VAULT_INIT_FILE}})

vault_test:
    @just vault_kv_get test test

vault_full_run: vault_start vault_unseal vault_test

vault_secret_prod_host:
    @just vault_kv_get prod host

vault_secret_prod_user:
    @just vault_kv_get prod user

vault_secret_prod_pass:
    @just vault_kv_get prod pass

vault_secret_github_token:
    @just vault_kv_get github token

vault_kv_get path key:
   @docker exec hashi-vault vault kv get -mount="kv" -format=yaml -field={{key}} {{path}} | xargs

# Cryptography

age_generate_key:
    mkdir -p {{LOLAL_TMP_DIR}}
    rm -rf {{LOLAL_TMP_DIR}}/**

    age-keygen --output={{SK_PLAINTEXT_FILE}}
    age-keygen -y {{SK_PLAINTEXT_FILE}} > {{PK_FILE}}

    #age --encrypt --passphrase --armor --output={{SK_ENC_FILE}} {{SK_PLAINTEXT_FILE}}
    #gpg --batch --yes --passphrase-file {{SENTINEL_KEY_FILE}} --symmetric --armor --cipher-algo AES256 --output {{SK_ENC_FILE}} {{SK_PLAINTEXT_FILE}}

    gpg --symmetric --pinentry-mode=loopback --no-symkey-cache --armor --cipher-algo AES256 --output {{SK_ENC_FILE}} {{SK_PLAINTEXT_FILE}}
    rm -rf {{LOLAL_TMP_DIR}}

local_tmp_clean_up:
    rm -rf {{LOLAL_TMP_DIR}}/**

gpg_decrypt_sentinel_key: genesis
    #echo "your_passphrase" | gpg --decrypt --batch --yes --passphrase-fd 0 --output decrypted_file.txt encrypted_file.gpg
    gpg --batch --yes --decrypt --passphrase-file {{SENTINEL_KEY_FILE}} --output {{SK_PLAINTEXT_FILE}} {{SK_ENC_FILE}}

age_encrypt:
    age --encrypt --armor -R={{PK_FILE}} --output=secret.enc.txt secret.txt

age_decrypt: gpg_decrypt_sentinel_key
    #gpg --batch --yes --armor --passphrase-file passphrase.txt --decrypt --output decrypted_file.txt encrypted_file.gpg
    age --decrypt --identity={{SK_PLAINTEXT_FILE}} secret.enc.txt

age_key_rotation: age_generate_key age_encrypt age_decrypt

void_sentinel_vault_init_encrypt:
    age --encrypt --armor -R={{PK_FILE}} --output={{VAULT_INIT_ENCRYPTED_FILE}} {{VAULT_INIT_FILE}}

void_sentinel_vault_init_decrypt: gpg_decrypt_sentinel_key
    age --decrypt --identity={{SK_PLAINTEXT_FILE}} {{VAULT_INIT_ENCRYPTED_FILE}} > {{VAULT_INIT_FILE}}

# Pass secrets to terraform via tfvars file. Vault must be running.
save_tf_security_vars path:
    jq -n \
      --arg prod_host "$(just vault_secret_prod_host)" \
      --arg prod_user "$(just vault_secret_prod_user)" \
      --arg prod_pass "$(just vault_secret_prod_pass)" \
       '{"prod_host":$prod_host, "prod_user":$prod_user, "prod_pass":$prod_pass}' > {{path}}


    #echo prod_host = $(just vault_secret_prod_host) > {{path}}
    #echo prod_user = "$(just vault_secret_prod_user)" >> {{path}}
    #echo prod_pass = "$(just vault_secret_prod_pass)" >> {{path}}


save_github_token path:
    echo $(just vault_secret_github_token) > {{path}}

hash_pass:
    ./hash_pass.sh
