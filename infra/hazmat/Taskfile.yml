version: '3'

dotenv: ['tmp/.env']

vars:
  LOCAL_TMP_DIR: "tmp"

  VAULT_INIT_FILE: "{{.LOCAL_TMP_DIR}}/vault-init.json"
  VAULT_INIT_ENCRYPTED_FILE: "void_sentinel/vault_init.enc.txt"

  VAULT_ROOT_TOKEN_FILE: "{{.LOCAL_TMP_DIR}}/vault-root-token.txt"
  VAULT_UNSEAL_KEY_FILE: "{{.LOCAL_TMP_DIR}}/vault-unseal-key.txt"

  SENTINEL_KEY_FILE: "{{.LOCAL_TMP_DIR}}/sentinel.txt"

  SK_PLAINTEXT_FILE: "{{.LOCAL_TMP_DIR}}/nervoset-sk.txt"
  SK_ENC_FILE: "void_sentinel/nervoset-sk.enc.txt"

  PK_FILE: "void_sentinel/nervoset-pk.txt"

  TF_VAR_FILE: "{{.LOCAL_TMP_DIR}}/security.tfvars"

  VAULT_CONTAINER_NAME: "hashi-vault"

tasks:
  default:
    cmds:
      - task --list-all

  sleep:
    cmds:
      - sleep 3

  genesis:
    preconditions:
      - sh: test -f {{.SK_ENC_FILE}}
        msg: "Encrypted Master password file: {{.SK_ENC_FILE}} does not exists. Please create it first."
      - sh: test -f {{.VAULT_INIT_ENCRYPTED_FILE}}
        msg: "Vault init file: {{.VAULT_INIT_ENCRYPTED_FILE}} does not exists. Please decrypt it first."
      - sh: '[ ! -z "${NERVOSET_VOID_SENTINEL}" ]'
        msg: "Master password variable: NERVOSET_VOID_SENTINEL is not set"
    cmds:
      - mkdir -p {{.LOCAL_TMP_DIR}}
      - echo genesis, done!

  vault_start_and_init:
    cmds:
      - task: vault_start
      - task: vault_init

  vault_full_run:
    cmds:
      - task: vault_start
      - task: vault_unseal
      - task: vault_test

  vault_full_restart:
    cmds:
      - task: vault_stop
      - task: vault_start
      - task: vault_unseal
      - task: vault_test

  # Danger zone
  vault_full_rebuild:
    cmds:
      - task: vault_stop
      - rm -rf vault/nervoset-vault-storage || true
      - task: vault_start_and_init

  vault_init:
    cmds:
      - task: genesis
      - |-
        docker exec {{.VAULT_CONTAINER_NAME}} \
          vault operator init -key-shares=1 -key-threshold=1 -format=json > {{.VAULT_INIT_FILE}}
      # Extract root token and unseal key
      #jq -r '.root_token' {{VAULT_INIT_FILE}} > {{VAULT_ROOT_TOKEN_FILE}}
      #jq -r '.unseal_keys_b64[0]' {{VAULT_INIT_FILE}} > {{VAULT_UNSEAL_KEY_FILE}}

  vault_login:
    cmds:
      - docker exec {{.VAULT_CONTAINER_NAME}} vault login -no-store $(jq -r '.root_token' {{.VAULT_INIT_FILE}})

  vault_unseal:
    cmds:
      - docker exec {{.VAULT_CONTAINER_NAME}} vault operator unseal $(jq -r '.unseal_keys_b64[0]' {{.VAULT_INIT_FILE}})
      - task: sleep

  vault_stop:
    cmds:
      - docker kill {{.VAULT_CONTAINER_NAME}} || true

  vault_start:
    cmds:
      - task: void_sentinel_vault_init_decrypt
      - mkdir -p vault/nervoset-vault-storage
      - |-
        docker run --rm -d \
          --name={{.VAULT_CONTAINER_NAME}} \
          -v $(pwd)/vault/config.hcl:/vault/config/config.hcl \
          -v $(pwd)/vault/nervoset-vault-storage:/vault/file \
          -e SKIP_CHOWN=true \
          -e SKIP_SETCAP=true \
          -e VAULT_ADDR="http://127.0.0.1:8200" \
          -e VAULT_TOKEN=$(jq -r '.root_token' {{.VAULT_INIT_FILE}}) \
          --user 1000:1000 \
          -p 8200:8200 \
          hashicorp/vault server
      - task: sleep

  # Very first start of the vault (run locally).
  # There is no unseal and root token yet.
  vault_genesis_start:
    cmds:
      - mkdir -p vault/nervoset-vault-storage
      - |-
        docker run --rm -d \
          --name={{.VAULT_CONTAINER_NAME}} \
          -v $(pwd)/vault/config.hcl:/vault/config/config.hcl \
          -v $(pwd)/vault/nervoset-vault-storage:/vault/file \
          -e SKIP_CHOWN=true \
          -e SKIP_SETCAP=true \
          -e VAULT_ADDR="http://127.0.0.1:8200" \
          --user 1000:1000 \
          -p 8200:8200 \
          hashicorp/vault server

  # Decrypt the sentinel key. NERVOSET_VOID_SENTINEL env variable must be set (master password).
  gpg_decrypt_sentinel_key:
    cmds:
      - task: genesis
      #echo "your_passphrase" | gpg --decrypt --batch --yes --passphrase-fd 0 --output decrypted_file.txt encrypted_file.gpg
      - gpg --batch --yes --decrypt --passphrase ${NERVOSET_VOID_SENTINEL} --output {{.SK_PLAINTEXT_FILE}} {{.SK_ENC_FILE}}
    silent: true

  age_generate_key:
    cmds:
      - mkdir -p {{.LOCAL_TMP_DIR}}
      - rm -rf {{.LOCAL_TMP_DIR}}/**
      - age-keygen --output={{.SK_PLAINTEXT_FILE}}
      - age-keygen -y {{.SK_PLAINTEXT_FILE}} > {{.PK_FILE}}
      #age --encrypt --passphrase --armor --output={{SK_ENC_FILE}} {{SK_PLAINTEXT_FILE}}
      #gpg --batch --yes --passphrase-file {{SENTINEL_KEY_FILE}} --symmetric --armor --cipher-algo AES256 --output {{SK_ENC_FILE}} {{SK_PLAINTEXT_FILE}}
      - |-
        gpg \
          --symmetric \
          --pinentry-mode=loopback \
          --no-symkey-cache \
          --armor \
          --cipher-algo AES256 \
          --output {{.SK_ENC_FILE}} \
          {{.SK_PLAINTEXT_FILE}}
      - rm -rf {{.LOCAL_TMP_DIR}}

  gpg_decrypt_sentinel_key_with_sentinel_file:
    cmds:
      - task: genesis
      #echo "your_passphrase" | gpg --decrypt --batch --yes --passphrase-fd 0 --output decrypted_file.txt encrypted_file.gpg
      - gpg --batch --yes --decrypt --passphrase-file {{.SENTINEL_KEY_FILE}} --output {{.SK_PLAINTEXT_FILE}} {{.SK_ENC_FILE}}
    silent: true

  age_key_rotation:
    cmds:
      - task: age_generate_key
      - task: age_encrypt
      - task: age_decrypt

  age_decrypt:
    cmds:
      - task: gpg_decrypt_sentinel_key
      #gpg --batch --yes --armor --passphrase-file passphrase.txt --decrypt --output decrypted_file.txt encrypted_file.gpg
      - age --decrypt --identity={{.SK_PLAINTEXT_FILE}} secret.enc.txt
    silent: true

  age_encrypt:
    cmds:
      - age --encrypt --armor -R={{.PK_FILE}} --output=secret.enc.txt secret.txt
    silent: true

  void_sentinel_vault_init_encrypt:
    cmds:
      - age --encrypt --armor -R={{.PK_FILE}} --output={{.VAULT_INIT_ENCRYPTED_FILE}} {{.VAULT_INIT_FILE}}

  void_sentinel_vault_init_decrypt:
    cmds:
      - task: gpg_decrypt_sentinel_key
      - age --decrypt --identity={{.SK_PLAINTEXT_FILE}} {{.VAULT_INIT_ENCRYPTED_FILE}} > {{.VAULT_INIT_FILE}}
    silent: true

  save_github_token:
    vars:
      GH_TOKEN:
        sh: task vault_secret_github_token
    cmds:
      - echo {{.GH_TOKEN}} > {{.PATH}}
    silent: true

  vault_test:
    cmds:
      - echo "Check if vault is working properly"
      - task: vault_kv_get
        vars:
          PATH: test
          KEY: test

  vault_secret_prod_user:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: prod
          KEY: user

  vault_secret_prod_host:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: prod
          KEY: host

  vault_secret_prod_pass:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: prod
          KEY: pass

  vault_secret_github_token:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: github
          KEY: token

  vault_secret_docker_pass:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: docker
          KEY: pass

  vault_secret_docker_user:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: docker
          KEY: user

  vault_secret_docker_email:
    cmds:
      - task: vault_kv_get
        vars:
          PATH: docker
          KEY: email

  save_tf_security_vars:
    vars:
      PROD_HOST:
        sh: task vault_secret_prod_host
      PROD_USER:
        sh: task vault_secret_prod_user
      PROD_PASS:
        sh: task vault_secret_prod_pass
    cmds:
      - |-
        jq -n \
        --arg prod_host "{{.PROD_HOST}}" \
        --arg prod_user "{{.PROD_USER}}" \
        --arg prod_pass "{{.PROD_PASS}}" \
        '{"prod_host":$prod_host, "prod_user":$prod_user, "prod_pass":$prod_pass}' > {{.PATH}}
    silent: true

  vault_kv_get:
    cmds:
      - docker exec {{.VAULT_CONTAINER_NAME}} vault kv get -mount="kv" -format=yaml -field={{.KEY}} {{.PATH}} | xargs

  local_tmp_clean_up:
    cmds:
      - rm -rf {{.LOCAL_TMP_DIR}}/**

  hash_pass:
    cmds:
      - ./hash_pass.sh

  auth:
    cmds:
      - ./hash_auth.sh

  login:
    cmds:
      - task: vault_full_restart